(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const t of document.querySelectorAll('link[rel="modulepreload"]'))r(t);new MutationObserver(t=>{for(const n of t)if(n.type==="childList")for(const s of n.addedNodes)s.tagName==="LINK"&&s.rel==="modulepreload"&&r(s)}).observe(document,{childList:!0,subtree:!0});function i(t){const n={};return t.integrity&&(n.integrity=t.integrity),t.referrerPolicy&&(n.referrerPolicy=t.referrerPolicy),t.crossOrigin==="use-credentials"?n.credentials="include":t.crossOrigin==="anonymous"?n.credentials="omit":n.credentials="same-origin",n}function r(t){if(t.ep)return;t.ep=!0;const n=i(t);fetch(t.href,n)}})();class u{constructor(){this.isSupported=this.checkSupport(),this.credentials=new Map,this.authCount=0,this.currentUserId=null,this.currentCredentialId=null}checkSupport(){return!!(navigator.credentials&&window.PublicKeyCredential)}async checkPlatformAuthenticator(){try{if(!await PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable())throw new Error("Platform authenticator (built-in biometric) is not available on this device");return!0}catch(e){throw console.error("Platform authenticator check failed:",e),new Error("Unable to check for platform authenticator support")}}checkAndroidRequirements(){const e=navigator.userAgent.toLowerCase(),i=e.includes("android"),r=e.includes("chrome"),t=window.isSecureContext;if(i&&r){if(!t)throw new Error("HTTPS is required for biometric authentication on Android Chrome");if(location.protocol!=="https:"&&location.hostname!=="localhost")throw new Error("Biometric authentication requires HTTPS on Android Chrome")}return!0}generateChallenge(){const e=new Uint8Array(32);return crypto.getRandomValues(e),e}arrayBufferToBase64URL(e){const i=new Uint8Array(e);let r="";for(let t=0;t<i.byteLength;t++)r+=String.fromCharCode(i[t]);return btoa(r).replace(/\+/g,"-").replace(/\//g,"_").replace(/=/g,"")}base64URLToArrayBuffer(e){const i=e.replace(/-/g,"+").replace(/_/g,"/"),r=atob(i),t=new Uint8Array(r.length);for(let n=0;n<r.length;n++)t[n]=r.charCodeAt(n);return t.buffer}async register(e=null){if(!this.isSupported)throw new Error("WebAuthn is not supported in this browser");this.checkAndroidRequirements(),await this.checkPlatformAuthenticator();try{e||(e="user_"+Date.now()+"_"+Math.random().toString(36).substr(2,9));const r={publicKey:{challenge:this.generateChallenge(),rp:{name:"Altis",id:window.location.hostname||"localhost"},user:{id:new TextEncoder().encode(e),name:e,displayName:"Altis User"},pubKeyCredParams:[{type:"public-key",alg:-7},{type:"public-key",alg:-257}],authenticatorSelection:{authenticatorAttachment:"platform",userVerification:"required",residentKey:"required"},timeout:6e4,attestation:"none"}};console.log("Creating credential with options:",r);const t=await navigator.credentials.create(r);console.log("Credential created successfully:",t);const n={id:t.id,rawId:this.arrayBufferToBase64URL(t.rawId),publicKey:this.arrayBufferToBase64URL(t.response.publicKey),userId:e,createdAt:new Date().toISOString()};return this.credentials.set(t.id,n),this.currentUserId=e,this.currentCredentialId=t.id,localStorage.setItem("altis_credentials",JSON.stringify(Array.from(this.credentials.entries()))),localStorage.setItem("altis_user_id",e),localStorage.setItem("altis_credential_id",t.id),{success:!0,credentialId:t.id,userId:e,message:"Biometric credential created successfully!"}}catch(i){if(console.error("Registration failed:",i),i.name==="NotSupportedError"||i.message.includes("platform authenticator")){console.log("Trying fallback approach without platform authenticator restriction...");try{return await this.registerFallback(e)}catch(r){console.error("Fallback registration also failed:",r)}}throw i.name==="NotSupportedError"?new Error("Biometric authentication is not supported on this device"):i.name==="NotAllowedError"?new Error("Registration was cancelled or not allowed"):i.name==="SecurityError"?new Error("Security error - make sure you are using HTTPS"):i.name==="InvalidStateError"?new Error("Invalid state - credential may already exist"):new Error(`Registration failed: ${i.message||"Unknown error occurred"}`)}}async registerFallback(e){console.log("Attempting fallback registration...");const r={publicKey:{challenge:this.generateChallenge(),rp:{name:"Altis",id:window.location.hostname||"localhost"},user:{id:new TextEncoder().encode(e),name:e,displayName:"Altis User"},pubKeyCredParams:[{type:"public-key",alg:-7},{type:"public-key",alg:-257}],authenticatorSelection:{userVerification:"preferred",residentKey:"preferred"},timeout:6e4,attestation:"none"}};console.log("Fallback create options:",r);const t=await navigator.credentials.create(r),n={id:t.id,rawId:this.arrayBufferToBase64URL(t.rawId),publicKey:this.arrayBufferToBase64URL(t.response.publicKey),userId:e,createdAt:new Date().toISOString()};return this.credentials.set(t.id,n),this.currentUserId=e,this.currentCredentialId=t.id,localStorage.setItem("altis_credentials",JSON.stringify(Array.from(this.credentials.entries()))),localStorage.setItem("altis_user_id",e),localStorage.setItem("altis_credential_id",t.id),{success:!0,credentialId:t.id,userId:e,message:"Biometric credential created successfully (fallback method)!"}}async authenticate(){if(!this.isSupported)throw new Error("WebAuthn is not supported in this browser");this.checkAndroidRequirements();try{if(this.loadStoredCredentials(),this.credentials.size===0)throw new Error("No credentials found. Please register first.");const e=this.generateChallenge(),i=Array.from(this.credentials.keys()).map(a=>this.base64URLToArrayBuffer(a)),r={publicKey:{challenge:e,allowCredentials:i.map(a=>({type:"public-key",id:a})),userVerification:"preferred",timeout:6e4}},t=await navigator.credentials.get(r),n=this.arrayBufferToBase64URL(t.rawId),s=this.credentials.get(n);if(!s)throw new Error("Credential not found");return this.authCount++,this.currentUserId=s.userId,this.currentCredentialId=n,localStorage.setItem("altis_auth_count",this.authCount.toString()),{success:!0,credentialId:n,userId:s.userId,authCount:this.authCount,message:"Authentication successful!"}}catch(e){throw console.error("Authentication failed:",e),e.name==="NotSupportedError"?new Error("Biometric authentication is not supported on this device"):e.name==="NotAllowedError"?new Error("Authentication was cancelled or not allowed"):e.name==="SecurityError"?new Error("Security error - make sure you are using HTTPS"):e.name==="InvalidStateError"?new Error("Invalid state - no credentials found"):new Error(`Authentication failed: ${e.message||"Unknown error occurred"}`)}}loadStoredCredentials(){try{const e=localStorage.getItem("altis_credentials");if(e){const n=JSON.parse(e);this.credentials=new Map(n)}const i=localStorage.getItem("altis_user_id"),r=localStorage.getItem("altis_credential_id"),t=localStorage.getItem("altis_auth_count");i&&(this.currentUserId=i),r&&(this.currentCredentialId=r),t&&(this.authCount=parseInt(t,10))}catch(e){console.error("Failed to load stored credentials:",e)}}isRegistered(){return this.loadStoredCredentials(),this.credentials.size>0}logout(){this.currentUserId=null,this.currentCredentialId=null,this.authCount=0,localStorage.removeItem("altis_user_id"),localStorage.removeItem("altis_credential_id"),localStorage.removeItem("altis_auth_count")}getCurrentUser(){return{userId:this.currentUserId,credentialId:this.currentCredentialId,authCount:this.authCount,isAuthenticated:!!this.currentUserId}}isAuthenticated(){return!!this.currentUserId}}class h{constructor(){this.webauthn=new u,this.elements=this.initializeElements(),this.initializeApp()}initializeElements(){return{statusIndicator:document.getElementById("status-indicator"),statusText:document.getElementById("status-text"),registerBtn:document.getElementById("register-btn"),authenticateBtn:document.getElementById("authenticate-btn"),logoutBtn:document.getElementById("logout-btn"),userInfo:document.getElementById("user-info"),userId:document.getElementById("user-id"),credentialId:document.getElementById("credential-id"),authCount:document.getElementById("auth-count"),authContainer:document.getElementById("auth-container"),content:document.getElementById("content")}}async initializeApp(){try{if(this.initializeVersionDisplay(),!this.webauthn.isSupported){this.updateStatus("error","WebAuthn not supported in this browser"),this.disableAllButtons();return}this.webauthn.loadStoredCredentials(),this.webauthn.isRegistered()?(this.updateStatus("loading","Checking authentication..."),this.webauthn.isAuthenticated()?this.showAuthenticatedState():this.showRegisteredState()):this.showUnregisteredState(),this.setupEventListeners()}catch(e){console.error("App initialization failed:",e),this.updateStatus("error","Initialization failed")}}initializeVersionDisplay(){const e=document.getElementById("version-number"),i=document.getElementById("build-info");if(e&&i){const r=new Date,t=r.getFullYear(),n=String(r.getMonth()+1).padStart(2,"0"),s=String(r.getDate()).padStart(2,"0"),a=String(r.getHours()).padStart(2,"0"),c=String(r.getMinutes()).padStart(2,"0"),l=`${t}${n}${s}-${a}${c}`,d=r.toLocaleString("en-US",{month:"2-digit",day:"2-digit",year:"numeric",hour:"2-digit",minute:"2-digit",second:"2-digit",hour12:!0});e.textContent=`v0.0.1+${l}`,i.textContent=`Build: ${l} (${d})`}}setupEventListeners(){this.elements.registerBtn.addEventListener("click",()=>this.handleRegister()),this.elements.authenticateBtn.addEventListener("click",()=>this.handleAuthenticate()),this.elements.logoutBtn.addEventListener("click",()=>this.handleLogout())}async handleRegister(){try{this.updateStatus("loading","Creating biometric key..."),this.disableAllButtons();const e=await this.webauthn.register();e.success&&(this.updateStatus("authenticated","Biometric key created successfully!"),this.showAuthenticatedState(),this.showUserInfo(e.userId,e.credentialId))}catch(e){console.error("Registration error:",e),this.updateStatus("error",e.message),this.showRegisteredState()}}async handleAuthenticate(){try{this.updateStatus("loading","Authenticating with biometric..."),this.disableAllButtons();const e=await this.webauthn.authenticate();e.success&&(this.updateStatus("authenticated","Authentication successful!"),this.showAuthenticatedState(),this.showUserInfo(e.userId,e.credentialId,e.authCount))}catch(e){console.error("Authentication error:",e),this.updateStatus("error",e.message),this.showRegisteredState()}}handleLogout(){this.webauthn.logout(),this.updateStatus("loading","Logged out"),this.showRegisteredState()}updateStatus(e,i){this.elements.statusIndicator.className=`status-indicator ${e}`,this.elements.statusText.textContent=i,e==="loading"?this.disableAllButtons():e==="error"&&this.showRegisteredState()}showUnregisteredState(){this.elements.registerBtn.disabled=!1,this.elements.authenticateBtn.disabled=!0,this.elements.logoutBtn.disabled=!0,this.elements.userInfo.style.display="none",this.elements.content.style.display="none",this.elements.authContainer.style.display="block"}showRegisteredState(){this.elements.registerBtn.disabled=!0,this.elements.authenticateBtn.disabled=!1,this.elements.logoutBtn.disabled=!1,this.elements.userInfo.style.display="none",this.elements.content.style.display="none",this.elements.authContainer.style.display="block"}showAuthenticatedState(){this.elements.registerBtn.disabled=!0,this.elements.authenticateBtn.disabled=!0,this.elements.logoutBtn.disabled=!1,this.elements.userInfo.style.display="block",this.elements.content.style.display="block",this.elements.authContainer.style.display="none"}showUserInfo(e,i,r=0){this.elements.userId.textContent=e,this.elements.credentialId.textContent=i,this.elements.authCount.textContent=r}disableAllButtons(){this.elements.registerBtn.disabled=!0,this.elements.authenticateBtn.disabled=!0,this.elements.logoutBtn.disabled=!0}showNotification(e,i="info"){const r=document.createElement("div");r.className=`notification notification-${i}`,r.textContent=e,Object.assign(r.style,{position:"fixed",top:"20px",right:"20px",padding:"1rem 1.5rem",borderRadius:"10px",color:"white",fontWeight:"600",zIndex:"1000",maxWidth:"300px",wordWrap:"break-word",boxShadow:"0 10px 20px rgba(0, 0, 0, 0.2)",transform:"translateX(100%)",transition:"transform 0.3s ease"});const t={success:"#48bb78",error:"#f56565",info:"#4299e1",warning:"#ed8936"};r.style.backgroundColor=t[i]||t.info,document.body.appendChild(r),setTimeout(()=>{r.style.transform="translateX(0)"},100),setTimeout(()=>{r.style.transform="translateX(100%)",setTimeout(()=>{r.parentNode&&r.parentNode.removeChild(r)},300)},3e3)}}document.addEventListener("DOMContentLoaded",()=>{window.pwaApp=new h});window.addEventListener("beforeinstallprompt",o=>{o.preventDefault(),window.pwaApp&&window.pwaApp.showNotification("Altis can be installed on your device!","info")});window.addEventListener("appinstalled",()=>{console.log("PWA was installed"),window.pwaApp&&window.pwaApp.showNotification("Altis installed successfully!","success")});window.addEventListener("online",()=>{window.pwaApp&&window.pwaApp.showNotification("You are back online!","success")});window.addEventListener("offline",()=>{window.pwaApp&&window.pwaApp.showNotification("You are offline. Some features may be limited.","warning")});
