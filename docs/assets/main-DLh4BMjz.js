(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const i of document.querySelectorAll('link[rel="modulepreload"]'))t(i);new MutationObserver(i=>{for(const n of i)if(n.type==="childList")for(const a of n.addedNodes)a.tagName==="LINK"&&a.rel==="modulepreload"&&t(a)}).observe(document,{childList:!0,subtree:!0});function r(i){const n={};return i.integrity&&(n.integrity=i.integrity),i.referrerPolicy&&(n.referrerPolicy=i.referrerPolicy),i.crossOrigin==="use-credentials"?n.credentials="include":i.crossOrigin==="anonymous"?n.credentials="omit":n.credentials="same-origin",n}function t(i){if(i.ep)return;i.ep=!0;const n=r(i);fetch(i.href,n)}})();class u{constructor(){this.encryptedDataKey="altis_encrypted_data",this.encryptedKeyKey="altis_encrypted_private_key",this.encryptedPublicKeyKey="altis_encrypted_public_key"}async generateSigningKeyPair(){try{console.log("Generating new signing key pair...");const e=await crypto.subtle.generateKey({name:"ECDSA",namedCurve:"P-256"},!0,["sign","verify"]);return console.log("Signing key pair generated successfully"),e}catch(e){throw console.error("Failed to generate signing key pair:",e),new Error("Failed to generate signing key pair")}}async deriveEncryptionKey(e){try{console.log("Deriving encryption key from WebAuthn response...");const r=e.credentialId||e.id,t=e.response,i=new TextEncoder().encode(r+JSON.stringify(t)+"altis-encryption-salt"),n=await crypto.subtle.importKey("raw",i,{name:"PBKDF2"},!1,["deriveKey"]),a=await crypto.subtle.deriveKey({name:"PBKDF2",salt:new TextEncoder().encode("altis-salt-2025"),iterations:1e5,hash:"SHA-256"},n,{name:"AES-GCM",length:256},!1,["encrypt","decrypt"]);return console.log("Encryption key derived successfully"),a}catch(r){throw console.error("Failed to derive encryption key:",r),new Error("Failed to derive encryption key from WebAuthn response")}}async encryptPrivateKey(e,r){try{console.log("Encrypting private key...");const t=await crypto.subtle.exportKey("pkcs8",e),i=crypto.getRandomValues(new Uint8Array(12)),n=await crypto.subtle.encrypt({name:"AES-GCM",iv:i},r,t),a={iv:Array.from(i),data:Array.from(new Uint8Array(n)),timestamp:new Date().toISOString()};return console.log("Private key encrypted successfully"),a}catch(t){throw console.error("Failed to encrypt private key:",t),new Error("Failed to encrypt private key")}}async decryptPrivateKey(e,r){try{console.log("Decrypting private key...");const t=new Uint8Array(e.iv),i=new Uint8Array(e.data),n=await crypto.subtle.decrypt({name:"AES-GCM",iv:t},r,i),a=await crypto.subtle.importKey("pkcs8",n,{name:"ECDSA",namedCurve:"P-256"},!0,["sign"]);return console.log("Private key decrypted successfully"),a}catch(t){throw console.error("Failed to decrypt private key:",t),new Error("Failed to decrypt private key - biometric authentication may be required")}}async storeEncryptedKeys(e,r,t){try{console.log("Storing encrypted keys...");const i=await this.encryptPrivateKey(e,t),n=await crypto.subtle.exportKey("spki",r),a={data:Array.from(new Uint8Array(n)),timestamp:new Date().toISOString()};return localStorage.setItem(this.encryptedKeyKey,JSON.stringify(i)),localStorage.setItem(this.encryptedPublicKeyKey,JSON.stringify(a)),console.log("Encrypted keys stored successfully"),!0}catch(i){throw console.error("Failed to store encrypted keys:",i),new Error("Failed to store encrypted keys")}}async loadEncryptedPrivateKey(e){try{console.log("Loading encrypted private key...");const r=localStorage.getItem(this.encryptedKeyKey);if(!r)throw new Error("No encrypted private key found");const t=JSON.parse(r),i=await this.decryptPrivateKey(t,e);return console.log("Encrypted private key loaded successfully"),i}catch(r){throw console.error("Failed to load encrypted private key:",r),new Error("Failed to load encrypted private key")}}async loadPublicKey(){try{console.log("Loading public key...");const e=localStorage.getItem(this.encryptedPublicKeyKey);if(!e)throw new Error("No public key found");const r=JSON.parse(e),t=await crypto.subtle.importKey("spki",new Uint8Array(r.data),{name:"ECDSA",namedCurve:"P-256"},!0,["verify"]);return console.log("Public key loaded successfully"),t}catch(e){throw console.error("Failed to load public key:",e),new Error("Failed to load public key")}}async signData(e,r){try{console.log("Signing data with private key...");const t=new TextEncoder().encode(e),i=await crypto.subtle.sign({name:"ECDSA",hash:"SHA-256"},r,t),n=new Uint8Array(i),a=btoa(String.fromCharCode(...n));return console.log("Data signed successfully"),a}catch(t){throw console.error("Failed to sign data:",t),new Error("Failed to sign data")}}async verifySignature(e,r,t){try{console.log("Verifying signature...");const i=new TextEncoder().encode(e),n=new Uint8Array(atob(r).split("").map(o=>o.charCodeAt(0))),a=await crypto.subtle.verify({name:"ECDSA",hash:"SHA-256"},t,n,i);return console.log("Signature verification result:",a),a}catch(i){return console.error("Failed to verify signature:",i),!1}}hasEncryptedKeys(){return!!(localStorage.getItem(this.encryptedKeyKey)&&localStorage.getItem(this.encryptedPublicKeyKey))}clearEncryptedData(){localStorage.removeItem(this.encryptedKeyKey),localStorage.removeItem(this.encryptedPublicKeyKey),console.log("Encrypted data cleared")}}class h{constructor(){this.isSupported=this.checkSupport(),this.credentials=new Map,this.authCount=0,this.currentUserId=null,this.currentCredentialId=null,this.encryptionManager=new u,this.signingKeyPair=null}checkSupport(){return!!(navigator.credentials&&window.PublicKeyCredential)}async checkPlatformAuthenticator(){try{console.log("Checking platform authenticator availability...");const e=await PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable();return console.log("Platform authenticator available:",e),e?!0:(console.warn("Platform authenticator not available, will try fallback approach"),!1)}catch(e){return console.error("Platform authenticator check failed:",e),console.warn("Platform authenticator check failed, will try fallback approach"),!1}}checkAndroidRequirements(){const e=navigator.userAgent.toLowerCase(),r=e.includes("android"),t=e.includes("chrome"),i=e.includes("firefox"),n=window.isSecureContext;if(console.log("Browser detection:",{isAndroid:r,isChrome:t,isFirefox:i,isSecureContext:n}),r&&t){if(console.log("Android Chrome detected - applying Chrome-specific workarounds"),!n)throw new Error("HTTPS is required for biometric authentication on Android Chrome");if(location.protocol!=="https:"&&location.hostname!=="localhost")throw new Error("Biometric authentication requires HTTPS on Android Chrome")}else r&&i&&console.log("Android Firefox detected - should work normally");return!0}generateChallenge(){const e=new Uint8Array(32);return crypto.getRandomValues(e),e}arrayBufferToBase64URL(e){const r=new Uint8Array(e);let t="";for(let i=0;i<r.byteLength;i++)t+=String.fromCharCode(r[i]);return btoa(t).replace(/\+/g,"-").replace(/\//g,"_").replace(/=/g,"")}base64URLToArrayBuffer(e){const r=e.replace(/-/g,"+").replace(/_/g,"/"),t=atob(r),i=new Uint8Array(t.length);for(let n=0;n<t.length;n++)i[n]=t.charCodeAt(n);return i.buffer}async register(e=null){if(!this.isSupported)throw new Error("WebAuthn is not supported in this browser");this.checkAndroidRequirements();const r=await this.checkPlatformAuthenticator();e||(e="user_"+Date.now()+"_"+Math.random().toString(36).substr(2,9));const t=navigator.userAgent.toLowerCase();if(t.includes("android")&&t.includes("chrome")||!r){console.log("Android Chrome detected or platform authenticator not available, trying fallback approach first...");try{return await this.registerFallback(e)}catch(n){console.error("Fallback registration failed:",n)}}try{const a={publicKey:{challenge:this.generateChallenge(),rp:{name:"Altis",id:window.location.hostname||"localhost"},user:{id:new TextEncoder().encode(e),name:e,displayName:"Altis User"},pubKeyCredParams:[{type:"public-key",alg:-7},{type:"public-key",alg:-257}],authenticatorSelection:{authenticatorAttachment:"platform",userVerification:"required",residentKey:"required"},timeout:6e4,attestation:"none"}};console.log("Creating credential with options:",a);const o=await navigator.credentials.create(a);console.log("Credential created successfully:",o);const l={id:o.id,rawId:this.arrayBufferToBase64URL(o.rawId),publicKey:this.arrayBufferToBase64URL(o.response.publicKey),userId:e,createdAt:new Date().toISOString()};this.credentials.set(o.id,l),this.currentUserId=e,this.currentCredentialId=o.id,localStorage.setItem("altis_credentials",JSON.stringify(Array.from(this.credentials.entries()))),localStorage.setItem("altis_user_id",e),localStorage.setItem("altis_credential_id",o.id);try{console.log("Creating encrypted signing key pair...");const s=await this.encryptionManager.generateSigningKeyPair(),d=await this.encryptionManager.deriveEncryptionKey({credentialId:o.id,response:o.response});await this.encryptionManager.storeEncryptedKeys(s.privateKey,s.publicKey,d),this.signingKeyPair=s,console.log("Encrypted signing key pair created and stored successfully")}catch(s){console.error("Failed to create encrypted signing key pair:",s)}return{success:!0,credentialId:o.id,userId:e,message:"Biometric credential created successfully!"}}catch(n){if(console.error("Registration failed:",n),n.name==="NotSupportedError"||n.message.includes("platform authenticator")){console.log("Trying fallback approach without platform authenticator restriction...");try{return await this.registerFallback(e)}catch(a){console.error("Fallback registration also failed:",a)}}if(n.name==="NotSupportedError")throw new Error("Biometric authentication is not supported on this device");if(n.name==="NotAllowedError")throw new Error("Registration was cancelled or not allowed");if(n.name==="SecurityError")throw new Error("Security error - make sure you are using HTTPS");if(n.name==="InvalidStateError")throw new Error("Invalid state - credential may already exist");if(n.message.includes("credential manager")){const a=navigator.userAgent.toLowerCase();throw a.includes("android")&&a.includes("chrome")?new Error("Chrome on Android has known WebAuthn issues. Try using Firefox Mobile instead, or use a different device."):new Error(`Registration failed: ${n.message}`)}else throw new Error(`Registration failed: ${n.message||"Unknown error occurred"}`)}}async registerFallback(e){console.log("Attempting fallback registration...");const r=this.generateChallenge(),t=[{name:"Ultra-minimal Chrome",options:{publicKey:{challenge:r,rp:{name:"Altis",id:window.location.hostname||"localhost"},user:{id:new TextEncoder().encode(e),name:e,displayName:"Altis User"},pubKeyCredParams:[{type:"public-key",alg:-7}],timeout:3e4,attestation:"none"}}},{name:"No authenticator selection",options:{publicKey:{challenge:r,rp:{name:"Altis",id:window.location.hostname||"localhost"},user:{id:new TextEncoder().encode(e),name:e,displayName:"Altis User"},pubKeyCredParams:[{type:"public-key",alg:-7},{type:"public-key",alg:-257}],timeout:6e4,attestation:"none"}}},{name:"Minimal authenticator selection",options:{publicKey:{challenge:r,rp:{name:"Altis",id:window.location.hostname||"localhost"},user:{id:new TextEncoder().encode(e),name:e,displayName:"Altis User"},pubKeyCredParams:[{type:"public-key",alg:-7},{type:"public-key",alg:-257}],authenticatorSelection:{userVerification:"preferred"},timeout:6e4,attestation:"none"}}},{name:"Cross-platform authenticator",options:{publicKey:{challenge:r,rp:{name:"Altis",id:window.location.hostname||"localhost"},user:{id:new TextEncoder().encode(e),name:e,displayName:"Altis User"},pubKeyCredParams:[{type:"public-key",alg:-7},{type:"public-key",alg:-257}],authenticatorSelection:{authenticatorAttachment:"cross-platform",userVerification:"preferred",residentKey:"preferred"},timeout:6e4,attestation:"none"}}}];for(const i of t)try{console.log(`Trying ${i.name}...`),console.log("Create options:",i.options);const n=await navigator.credentials.create(i.options);console.log(`Success with ${i.name}:`,n);const a={id:n.id,rawId:this.arrayBufferToBase64URL(n.rawId),publicKey:this.arrayBufferToBase64URL(n.response.publicKey),userId:e,createdAt:new Date().toISOString()};return this.credentials.set(n.id,a),this.currentUserId=e,this.currentCredentialId=n.id,localStorage.setItem("altis_credentials",JSON.stringify(Array.from(this.credentials.entries()))),localStorage.setItem("altis_user_id",e),localStorage.setItem("altis_credential_id",n.id),{success:!0,credentialId:n.id,userId:e,message:`Biometric credential created successfully (${i.name})!`}}catch(n){console.error(`${i.name} failed:`,n)}throw new Error("All fallback registration approaches failed")}async authenticate(){if(!this.isSupported)throw new Error("WebAuthn is not supported in this browser");this.checkAndroidRequirements();try{if(this.loadStoredCredentials(),this.credentials.size===0)throw new Error("No credentials found. Please register first.");const e=this.generateChallenge(),r=Array.from(this.credentials.keys()).map(o=>this.base64URLToArrayBuffer(o)),t={publicKey:{challenge:e,allowCredentials:r.map(o=>({type:"public-key",id:o})),userVerification:"preferred",timeout:6e4}},i=await navigator.credentials.get(t),n=this.arrayBufferToBase64URL(i.rawId),a=this.credentials.get(n);if(!a)throw new Error("Credential not found");this.authCount++,this.currentUserId=a.userId,this.currentCredentialId=n,localStorage.setItem("altis_auth_count",this.authCount.toString());try{console.log("Loading encrypted signing key pair...");const o=await this.encryptionManager.deriveEncryptionKey({credentialId:n,response:i.response}),l=await this.encryptionManager.loadEncryptedPrivateKey(o),s=await this.encryptionManager.loadPublicKey();this.signingKeyPair={privateKey:l,publicKey:s},console.log("Encrypted signing key pair loaded successfully")}catch(o){console.error("Failed to load encrypted signing key pair:",o)}return{success:!0,credentialId:n,userId:a.userId,authCount:this.authCount,message:"Authentication successful!"}}catch(e){throw console.error("Authentication failed:",e),e.name==="NotSupportedError"?new Error("Biometric authentication is not supported on this device"):e.name==="NotAllowedError"?new Error("Authentication was cancelled or not allowed"):e.name==="SecurityError"?new Error("Security error - make sure you are using HTTPS"):e.name==="InvalidStateError"?new Error("Invalid state - no credentials found"):new Error(`Authentication failed: ${e.message||"Unknown error occurred"}`)}}loadStoredCredentials(){try{const e=localStorage.getItem("altis_credentials");if(e){const n=JSON.parse(e);this.credentials=new Map(n)}const r=localStorage.getItem("altis_user_id"),t=localStorage.getItem("altis_credential_id"),i=localStorage.getItem("altis_auth_count");r&&(this.currentUserId=r),t&&(this.currentCredentialId=t),i&&(this.authCount=parseInt(i,10))}catch(e){console.error("Failed to load stored credentials:",e)}}isRegistered(){return this.loadStoredCredentials(),this.credentials.size>0}logout(){this.currentUserId=null,this.currentCredentialId=null,this.authCount=0,localStorage.removeItem("altis_user_id"),localStorage.removeItem("altis_credential_id"),localStorage.removeItem("altis_auth_count")}getCurrentUser(){return{userId:this.currentUserId,credentialId:this.currentCredentialId,authCount:this.authCount,isAuthenticated:!!this.currentUserId}}isAuthenticated(){return!!this.currentUserId}async signData(e){if(!this.signingKeyPair||!this.signingKeyPair.privateKey)throw new Error("No signing key available - please authenticate first");try{console.log("Signing data with encrypted private key...");const r=await this.encryptionManager.signData(e,this.signingKeyPair.privateKey);return console.log("Data signed successfully"),r}catch(r){throw console.error("Failed to sign data:",r),new Error("Failed to sign data")}}async verifySignature(e,r){if(!this.signingKeyPair||!this.signingKeyPair.publicKey)throw new Error("No public key available - please authenticate first");try{console.log("Verifying signature with public key...");const t=await this.encryptionManager.verifySignature(e,r,this.signingKeyPair.publicKey);return console.log("Signature verification completed"),t}catch(t){return console.error("Failed to verify signature:",t),!1}}async getPublicKey(){if(!this.signingKeyPair||!this.signingKeyPair.publicKey)throw new Error("No public key available - please authenticate first");try{const e=await crypto.subtle.exportKey("spki",this.signingKeyPair.publicKey),r=new Uint8Array(e);return btoa(String.fromCharCode(...r))}catch(e){throw console.error("Failed to export public key:",e),new Error("Failed to export public key")}}hasEncryptedSigningKeys(){return this.encryptionManager.hasEncryptedKeys()}}class y{constructor(){this.webauthn=new h,this.elements=this.initializeElements(),this.initializeApp()}initializeElements(){return{statusIndicator:document.getElementById("status-indicator"),statusText:document.getElementById("status-text"),registerBtn:document.getElementById("register-btn"),authenticateBtn:document.getElementById("authenticate-btn"),logoutBtn:document.getElementById("logout-btn"),userInfo:document.getElementById("user-info"),userId:document.getElementById("user-id"),credentialId:document.getElementById("credential-id"),authCount:document.getElementById("auth-count"),authContainer:document.getElementById("auth-container"),content:document.getElementById("content"),returnHomeBtn:document.getElementById("return-home-btn"),logoutContentBtn:document.getElementById("logout-content-btn"),signingInput:document.getElementById("signing-input"),signDataBtn:document.getElementById("sign-data-btn"),signingResult:document.getElementById("signing-result")}}async initializeApp(){try{if(this.initializeVersionDisplay(),!this.webauthn.isSupported){this.updateStatus("error","WebAuthn not supported in this browser"),this.disableAllButtons();return}this.webauthn.loadStoredCredentials(),this.webauthn.isRegistered()?(this.updateStatus("loading","Checking authentication..."),this.webauthn.isAuthenticated()?this.showAuthenticatedState():this.showRegisteredState()):this.showUnregisteredState(),this.setupEventListeners()}catch(e){console.error("App initialization failed:",e),this.updateStatus("error","Initialization failed")}}initializeVersionDisplay(){const e=document.getElementById("version-number"),r=document.getElementById("build-info");if(e&&r){const t=new Date,i=t.getFullYear(),n=String(t.getMonth()+1).padStart(2,"0"),a=String(t.getDate()).padStart(2,"0"),o=String(t.getHours()).padStart(2,"0"),l=String(t.getMinutes()).padStart(2,"0"),s=`${i}${n}${a}-${o}${l}`,d=t.toLocaleString("en-US",{month:"2-digit",day:"2-digit",year:"numeric",hour:"2-digit",minute:"2-digit",second:"2-digit",hour12:!0});e.textContent=`v0.0.1+${s}`,r.textContent=`Build: ${s} (${d})`}}setupEventListeners(){this.elements.registerBtn.addEventListener("click",()=>this.handleRegister()),this.elements.authenticateBtn.addEventListener("click",()=>this.handleAuthenticate()),this.elements.logoutBtn.addEventListener("click",()=>this.handleLogout()),this.elements.returnHomeBtn.addEventListener("click",()=>this.handleReturnHome()),this.elements.logoutContentBtn.addEventListener("click",()=>this.handleLogout()),this.elements.signDataBtn.addEventListener("click",()=>this.handleSignData())}async handleRegister(){try{this.updateStatus("loading","Creating biometric key..."),this.disableAllButtons();const e=await this.webauthn.register();e.success&&(this.updateStatus("authenticated","Biometric key created successfully!"),this.showAuthenticatedState(),this.showUserInfo(e.userId,e.credentialId))}catch(e){console.error("Registration error:",e),this.updateStatus("error",e.message),this.showRegisteredState()}}async handleAuthenticate(){try{this.updateStatus("loading","Authenticating with biometric..."),this.disableAllButtons();const e=await this.webauthn.authenticate();e.success&&(this.updateStatus("authenticated","Authentication successful!"),this.showAuthenticatedState(),this.showUserInfo(e.userId,e.credentialId,e.authCount))}catch(e){console.error("Authentication error:",e),this.updateStatus("error",e.message),this.showRegisteredState()}}handleLogout(){this.webauthn.logout(),this.updateStatus("loading","Logged out"),this.showRegisteredState()}handleReturnHome(){this.showRegisteredState()}async handleSignData(){const e=this.elements.signingInput.value.trim();if(!e){this.showNotification("Please enter some text to sign","warning");return}try{this.elements.signDataBtn.disabled=!0,this.elements.signDataBtn.textContent="Signing...",console.log("Signing data:",e);const r=await this.webauthn.signData(e),t=await this.webauthn.verifySignature(e,r);document.getElementById("original-data").textContent=e,document.getElementById("signature-data").textContent=r,document.getElementById("verification-result").textContent=t?"✅ Valid":"❌ Invalid",this.elements.signingResult.style.display="block",this.showNotification("Data signed and verified successfully!","success")}catch(r){console.error("Signing failed:",r),this.showNotification(`Signing failed: ${r.message}`,"error")}finally{this.elements.signDataBtn.disabled=!1,this.elements.signDataBtn.textContent="Sign Data"}}updateStatus(e,r){this.elements.statusIndicator.className=`status-indicator ${e}`,this.elements.statusText.textContent=r,e==="loading"?this.disableAllButtons():e==="error"&&this.showRegisteredState()}showUnregisteredState(){this.elements.registerBtn.disabled=!1,this.elements.authenticateBtn.disabled=!0,this.elements.logoutBtn.disabled=!0,this.elements.userInfo.style.display="none",this.elements.content.style.display="none",this.elements.authContainer.style.display="block"}showRegisteredState(){this.elements.registerBtn.disabled=!0,this.elements.authenticateBtn.disabled=!1,this.elements.logoutBtn.disabled=!1,this.elements.userInfo.style.display="none",this.elements.content.style.display="none",this.elements.authContainer.style.display="block"}showAuthenticatedState(){this.elements.registerBtn.disabled=!0,this.elements.authenticateBtn.disabled=!0,this.elements.logoutBtn.disabled=!1,this.elements.userInfo.style.display="block",this.elements.content.style.display="block",this.elements.authContainer.style.display="none"}showUserInfo(e,r,t=0){this.elements.userId.textContent=e,this.elements.credentialId.textContent=r,this.elements.authCount.textContent=t,this.updateContentDetails(e,r,t)}updateContentDetails(e,r,t=0){const i=this.webauthn.credentials.get(r);document.getElementById("content-user-id").textContent=e,document.getElementById("content-credential-id").textContent=r,document.getElementById("content-auth-count").textContent=t;const n=i?new Date(i.createdAt).toLocaleString():"Unknown";document.getElementById("content-registration-date").textContent=n;const a=new Date().toLocaleString();document.getElementById("content-last-auth").textContent=a;const o=navigator.userAgent,l=this.getBrowserInfo(o);document.getElementById("content-browser").textContent=l}getBrowserInfo(e){return e.includes("Chrome")?"Chrome":e.includes("Firefox")?"Firefox":e.includes("Safari")?"Safari":e.includes("Edge")?"Edge":"Unknown Browser"}disableAllButtons(){this.elements.registerBtn.disabled=!0,this.elements.authenticateBtn.disabled=!0,this.elements.logoutBtn.disabled=!0}showNotification(e,r="info"){const t=document.createElement("div");t.className=`notification notification-${r}`,t.textContent=e,Object.assign(t.style,{position:"fixed",top:"20px",right:"20px",padding:"1rem 1.5rem",borderRadius:"10px",color:"white",fontWeight:"600",zIndex:"1000",maxWidth:"300px",wordWrap:"break-word",boxShadow:"0 10px 20px rgba(0, 0, 0, 0.2)",transform:"translateX(100%)",transition:"transform 0.3s ease"});const i={success:"#48bb78",error:"#f56565",info:"#4299e1",warning:"#ed8936"};t.style.backgroundColor=i[r]||i.info,document.body.appendChild(t),setTimeout(()=>{t.style.transform="translateX(0)"},100),setTimeout(()=>{t.style.transform="translateX(100%)",setTimeout(()=>{t.parentNode&&t.parentNode.removeChild(t)},300)},3e3)}}document.addEventListener("DOMContentLoaded",()=>{window.pwaApp=new y});window.addEventListener("beforeinstallprompt",c=>{c.preventDefault(),window.pwaApp&&window.pwaApp.showNotification("Altis can be installed on your device!","info")});window.addEventListener("appinstalled",()=>{console.log("PWA was installed"),window.pwaApp&&window.pwaApp.showNotification("Altis installed successfully!","success")});window.addEventListener("online",()=>{window.pwaApp&&window.pwaApp.showNotification("You are back online!","success")});window.addEventListener("offline",()=>{window.pwaApp&&window.pwaApp.showNotification("You are offline. Some features may be limited.","warning")});
