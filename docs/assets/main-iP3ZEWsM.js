(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const n of document.querySelectorAll('link[rel="modulepreload"]'))r(n);new MutationObserver(n=>{for(const t of n)if(t.type==="childList")for(const o of t.addedNodes)o.tagName==="LINK"&&o.rel==="modulepreload"&&r(o)}).observe(document,{childList:!0,subtree:!0});function i(n){const t={};return n.integrity&&(t.integrity=n.integrity),n.referrerPolicy&&(t.referrerPolicy=n.referrerPolicy),n.crossOrigin==="use-credentials"?t.credentials="include":n.crossOrigin==="anonymous"?t.credentials="omit":t.credentials="same-origin",t}function r(n){if(n.ep)return;n.ep=!0;const t=i(n);fetch(n.href,t)}})();class u{constructor(){this.isSupported=this.checkSupport(),this.credentials=new Map,this.authCount=0,this.currentUserId=null,this.currentCredentialId=null}checkSupport(){return!!(navigator.credentials&&window.PublicKeyCredential)}async checkPlatformAuthenticator(){try{console.log("Checking platform authenticator availability...");const e=await PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable();return console.log("Platform authenticator available:",e),e?!0:(console.warn("Platform authenticator not available, will try fallback approach"),!1)}catch(e){return console.error("Platform authenticator check failed:",e),console.warn("Platform authenticator check failed, will try fallback approach"),!1}}checkAndroidRequirements(){const e=navigator.userAgent.toLowerCase(),i=e.includes("android"),r=e.includes("chrome"),n=e.includes("firefox"),t=window.isSecureContext;if(console.log("Browser detection:",{isAndroid:i,isChrome:r,isFirefox:n,isSecureContext:t}),i&&r){if(console.log("Android Chrome detected - applying Chrome-specific workarounds"),!t)throw new Error("HTTPS is required for biometric authentication on Android Chrome");if(location.protocol!=="https:"&&location.hostname!=="localhost")throw new Error("Biometric authentication requires HTTPS on Android Chrome")}else i&&n&&console.log("Android Firefox detected - should work normally");return!0}generateChallenge(){const e=new Uint8Array(32);return crypto.getRandomValues(e),e}arrayBufferToBase64URL(e){const i=new Uint8Array(e);let r="";for(let n=0;n<i.byteLength;n++)r+=String.fromCharCode(i[n]);return btoa(r).replace(/\+/g,"-").replace(/\//g,"_").replace(/=/g,"")}base64URLToArrayBuffer(e){const i=e.replace(/-/g,"+").replace(/_/g,"/"),r=atob(i),n=new Uint8Array(r.length);for(let t=0;t<r.length;t++)n[t]=r.charCodeAt(t);return n.buffer}async register(e=null){if(!this.isSupported)throw new Error("WebAuthn is not supported in this browser");this.checkAndroidRequirements();const i=await this.checkPlatformAuthenticator();e||(e="user_"+Date.now()+"_"+Math.random().toString(36).substr(2,9));const r=navigator.userAgent.toLowerCase();if(r.includes("android")&&r.includes("chrome")||!i){console.log("Android Chrome detected or platform authenticator not available, trying fallback approach first...");try{return await this.registerFallback(e)}catch(t){console.error("Fallback registration failed:",t)}}try{const o={publicKey:{challenge:this.generateChallenge(),rp:{name:"Altis",id:window.location.hostname||"localhost"},user:{id:new TextEncoder().encode(e),name:e,displayName:"Altis User"},pubKeyCredParams:[{type:"public-key",alg:-7},{type:"public-key",alg:-257}],authenticatorSelection:{authenticatorAttachment:"platform",userVerification:"required",residentKey:"required"},timeout:6e4,attestation:"none"}};console.log("Creating credential with options:",o);const a=await navigator.credentials.create(o);console.log("Credential created successfully:",a);const s={id:a.id,rawId:this.arrayBufferToBase64URL(a.rawId),publicKey:this.arrayBufferToBase64URL(a.response.publicKey),userId:e,createdAt:new Date().toISOString()};return this.credentials.set(a.id,s),this.currentUserId=e,this.currentCredentialId=a.id,localStorage.setItem("altis_credentials",JSON.stringify(Array.from(this.credentials.entries()))),localStorage.setItem("altis_user_id",e),localStorage.setItem("altis_credential_id",a.id),{success:!0,credentialId:a.id,userId:e,message:"Biometric credential created successfully!"}}catch(t){if(console.error("Registration failed:",t),t.name==="NotSupportedError"||t.message.includes("platform authenticator")){console.log("Trying fallback approach without platform authenticator restriction...");try{return await this.registerFallback(e)}catch(o){console.error("Fallback registration also failed:",o)}}if(t.name==="NotSupportedError")throw new Error("Biometric authentication is not supported on this device");if(t.name==="NotAllowedError")throw new Error("Registration was cancelled or not allowed");if(t.name==="SecurityError")throw new Error("Security error - make sure you are using HTTPS");if(t.name==="InvalidStateError")throw new Error("Invalid state - credential may already exist");if(t.message.includes("credential manager")){const o=navigator.userAgent.toLowerCase();throw o.includes("android")&&o.includes("chrome")?new Error("Chrome on Android has known WebAuthn issues. Try using Firefox Mobile instead, or use a different device."):new Error(`Registration failed: ${t.message}`)}else throw new Error(`Registration failed: ${t.message||"Unknown error occurred"}`)}}async registerFallback(e){console.log("Attempting fallback registration...");const i=this.generateChallenge(),r=[{name:"Ultra-minimal Chrome",options:{publicKey:{challenge:i,rp:{name:"Altis",id:window.location.hostname||"localhost"},user:{id:new TextEncoder().encode(e),name:e,displayName:"Altis User"},pubKeyCredParams:[{type:"public-key",alg:-7}],timeout:3e4,attestation:"none"}}},{name:"No authenticator selection",options:{publicKey:{challenge:i,rp:{name:"Altis",id:window.location.hostname||"localhost"},user:{id:new TextEncoder().encode(e),name:e,displayName:"Altis User"},pubKeyCredParams:[{type:"public-key",alg:-7},{type:"public-key",alg:-257}],timeout:6e4,attestation:"none"}}},{name:"Minimal authenticator selection",options:{publicKey:{challenge:i,rp:{name:"Altis",id:window.location.hostname||"localhost"},user:{id:new TextEncoder().encode(e),name:e,displayName:"Altis User"},pubKeyCredParams:[{type:"public-key",alg:-7},{type:"public-key",alg:-257}],authenticatorSelection:{userVerification:"preferred"},timeout:6e4,attestation:"none"}}},{name:"Cross-platform authenticator",options:{publicKey:{challenge:i,rp:{name:"Altis",id:window.location.hostname||"localhost"},user:{id:new TextEncoder().encode(e),name:e,displayName:"Altis User"},pubKeyCredParams:[{type:"public-key",alg:-7},{type:"public-key",alg:-257}],authenticatorSelection:{authenticatorAttachment:"cross-platform",userVerification:"preferred",residentKey:"preferred"},timeout:6e4,attestation:"none"}}}];for(const n of r)try{console.log(`Trying ${n.name}...`),console.log("Create options:",n.options);const t=await navigator.credentials.create(n.options);console.log(`Success with ${n.name}:`,t);const o={id:t.id,rawId:this.arrayBufferToBase64URL(t.rawId),publicKey:this.arrayBufferToBase64URL(t.response.publicKey),userId:e,createdAt:new Date().toISOString()};return this.credentials.set(t.id,o),this.currentUserId=e,this.currentCredentialId=t.id,localStorage.setItem("altis_credentials",JSON.stringify(Array.from(this.credentials.entries()))),localStorage.setItem("altis_user_id",e),localStorage.setItem("altis_credential_id",t.id),{success:!0,credentialId:t.id,userId:e,message:`Biometric credential created successfully (${n.name})!`}}catch(t){console.error(`${n.name} failed:`,t)}throw new Error("All fallback registration approaches failed")}async authenticate(){if(!this.isSupported)throw new Error("WebAuthn is not supported in this browser");this.checkAndroidRequirements();try{if(this.loadStoredCredentials(),this.credentials.size===0)throw new Error("No credentials found. Please register first.");const e=this.generateChallenge(),i=Array.from(this.credentials.keys()).map(a=>this.base64URLToArrayBuffer(a)),r={publicKey:{challenge:e,allowCredentials:i.map(a=>({type:"public-key",id:a})),userVerification:"preferred",timeout:6e4}},n=await navigator.credentials.get(r),t=this.arrayBufferToBase64URL(n.rawId),o=this.credentials.get(t);if(!o)throw new Error("Credential not found");return this.authCount++,this.currentUserId=o.userId,this.currentCredentialId=t,localStorage.setItem("altis_auth_count",this.authCount.toString()),{success:!0,credentialId:t,userId:o.userId,authCount:this.authCount,message:"Authentication successful!"}}catch(e){throw console.error("Authentication failed:",e),e.name==="NotSupportedError"?new Error("Biometric authentication is not supported on this device"):e.name==="NotAllowedError"?new Error("Authentication was cancelled or not allowed"):e.name==="SecurityError"?new Error("Security error - make sure you are using HTTPS"):e.name==="InvalidStateError"?new Error("Invalid state - no credentials found"):new Error(`Authentication failed: ${e.message||"Unknown error occurred"}`)}}loadStoredCredentials(){try{const e=localStorage.getItem("altis_credentials");if(e){const t=JSON.parse(e);this.credentials=new Map(t)}const i=localStorage.getItem("altis_user_id"),r=localStorage.getItem("altis_credential_id"),n=localStorage.getItem("altis_auth_count");i&&(this.currentUserId=i),r&&(this.currentCredentialId=r),n&&(this.authCount=parseInt(n,10))}catch(e){console.error("Failed to load stored credentials:",e)}}isRegistered(){return this.loadStoredCredentials(),this.credentials.size>0}logout(){this.currentUserId=null,this.currentCredentialId=null,this.authCount=0,localStorage.removeItem("altis_user_id"),localStorage.removeItem("altis_credential_id"),localStorage.removeItem("altis_auth_count")}getCurrentUser(){return{userId:this.currentUserId,credentialId:this.currentCredentialId,authCount:this.authCount,isAuthenticated:!!this.currentUserId}}isAuthenticated(){return!!this.currentUserId}}class h{constructor(){this.webauthn=new u,this.elements=this.initializeElements(),this.initializeApp()}initializeElements(){return{statusIndicator:document.getElementById("status-indicator"),statusText:document.getElementById("status-text"),registerBtn:document.getElementById("register-btn"),authenticateBtn:document.getElementById("authenticate-btn"),logoutBtn:document.getElementById("logout-btn"),userInfo:document.getElementById("user-info"),userId:document.getElementById("user-id"),credentialId:document.getElementById("credential-id"),authCount:document.getElementById("auth-count"),authContainer:document.getElementById("auth-container"),content:document.getElementById("content"),returnHomeBtn:document.getElementById("return-home-btn"),logoutContentBtn:document.getElementById("logout-content-btn")}}async initializeApp(){try{if(this.initializeVersionDisplay(),!this.webauthn.isSupported){this.updateStatus("error","WebAuthn not supported in this browser"),this.disableAllButtons();return}this.webauthn.loadStoredCredentials(),this.webauthn.isRegistered()?(this.updateStatus("loading","Checking authentication..."),this.webauthn.isAuthenticated()?this.showAuthenticatedState():this.showRegisteredState()):this.showUnregisteredState(),this.setupEventListeners()}catch(e){console.error("App initialization failed:",e),this.updateStatus("error","Initialization failed")}}initializeVersionDisplay(){const e=document.getElementById("version-number"),i=document.getElementById("build-info");if(e&&i){const r=new Date,n=r.getFullYear(),t=String(r.getMonth()+1).padStart(2,"0"),o=String(r.getDate()).padStart(2,"0"),a=String(r.getHours()).padStart(2,"0"),s=String(r.getMinutes()).padStart(2,"0"),c=`${n}${t}${o}-${a}${s}`,d=r.toLocaleString("en-US",{month:"2-digit",day:"2-digit",year:"numeric",hour:"2-digit",minute:"2-digit",second:"2-digit",hour12:!0});e.textContent=`v0.0.1+${c}`,i.textContent=`Build: ${c} (${d})`}}setupEventListeners(){this.elements.registerBtn.addEventListener("click",()=>this.handleRegister()),this.elements.authenticateBtn.addEventListener("click",()=>this.handleAuthenticate()),this.elements.logoutBtn.addEventListener("click",()=>this.handleLogout()),this.elements.returnHomeBtn.addEventListener("click",()=>this.handleReturnHome()),this.elements.logoutContentBtn.addEventListener("click",()=>this.handleLogout())}async handleRegister(){try{this.updateStatus("loading","Creating biometric key..."),this.disableAllButtons();const e=await this.webauthn.register();e.success&&(this.updateStatus("authenticated","Biometric key created successfully!"),this.showAuthenticatedState(),this.showUserInfo(e.userId,e.credentialId))}catch(e){console.error("Registration error:",e),this.updateStatus("error",e.message),this.showRegisteredState()}}async handleAuthenticate(){try{this.updateStatus("loading","Authenticating with biometric..."),this.disableAllButtons();const e=await this.webauthn.authenticate();e.success&&(this.updateStatus("authenticated","Authentication successful!"),this.showAuthenticatedState(),this.showUserInfo(e.userId,e.credentialId,e.authCount))}catch(e){console.error("Authentication error:",e),this.updateStatus("error",e.message),this.showRegisteredState()}}handleLogout(){this.webauthn.logout(),this.updateStatus("loading","Logged out"),this.showRegisteredState()}handleReturnHome(){this.showRegisteredState()}updateStatus(e,i){this.elements.statusIndicator.className=`status-indicator ${e}`,this.elements.statusText.textContent=i,e==="loading"?this.disableAllButtons():e==="error"&&this.showRegisteredState()}showUnregisteredState(){this.elements.registerBtn.disabled=!1,this.elements.authenticateBtn.disabled=!0,this.elements.logoutBtn.disabled=!0,this.elements.userInfo.style.display="none",this.elements.content.style.display="none",this.elements.authContainer.style.display="block"}showRegisteredState(){this.elements.registerBtn.disabled=!0,this.elements.authenticateBtn.disabled=!1,this.elements.logoutBtn.disabled=!1,this.elements.userInfo.style.display="none",this.elements.content.style.display="none",this.elements.authContainer.style.display="block"}showAuthenticatedState(){this.elements.registerBtn.disabled=!0,this.elements.authenticateBtn.disabled=!0,this.elements.logoutBtn.disabled=!1,this.elements.userInfo.style.display="block",this.elements.content.style.display="block",this.elements.authContainer.style.display="none"}showUserInfo(e,i,r=0){this.elements.userId.textContent=e,this.elements.credentialId.textContent=i,this.elements.authCount.textContent=r,this.updateContentDetails(e,i,r)}updateContentDetails(e,i,r=0){const n=this.webauthn.credentials.get(i);document.getElementById("content-user-id").textContent=e,document.getElementById("content-credential-id").textContent=i,document.getElementById("content-auth-count").textContent=r;const t=n?new Date(n.createdAt).toLocaleString():"Unknown";document.getElementById("content-registration-date").textContent=t;const o=new Date().toLocaleString();document.getElementById("content-last-auth").textContent=o;const a=navigator.userAgent,s=this.getBrowserInfo(a);document.getElementById("content-browser").textContent=s}getBrowserInfo(e){return e.includes("Chrome")?"Chrome":e.includes("Firefox")?"Firefox":e.includes("Safari")?"Safari":e.includes("Edge")?"Edge":"Unknown Browser"}disableAllButtons(){this.elements.registerBtn.disabled=!0,this.elements.authenticateBtn.disabled=!0,this.elements.logoutBtn.disabled=!0}showNotification(e,i="info"){const r=document.createElement("div");r.className=`notification notification-${i}`,r.textContent=e,Object.assign(r.style,{position:"fixed",top:"20px",right:"20px",padding:"1rem 1.5rem",borderRadius:"10px",color:"white",fontWeight:"600",zIndex:"1000",maxWidth:"300px",wordWrap:"break-word",boxShadow:"0 10px 20px rgba(0, 0, 0, 0.2)",transform:"translateX(100%)",transition:"transform 0.3s ease"});const n={success:"#48bb78",error:"#f56565",info:"#4299e1",warning:"#ed8936"};r.style.backgroundColor=n[i]||n.info,document.body.appendChild(r),setTimeout(()=>{r.style.transform="translateX(0)"},100),setTimeout(()=>{r.style.transform="translateX(100%)",setTimeout(()=>{r.parentNode&&r.parentNode.removeChild(r)},300)},3e3)}}document.addEventListener("DOMContentLoaded",()=>{window.pwaApp=new h});window.addEventListener("beforeinstallprompt",l=>{l.preventDefault(),window.pwaApp&&window.pwaApp.showNotification("Altis can be installed on your device!","info")});window.addEventListener("appinstalled",()=>{console.log("PWA was installed"),window.pwaApp&&window.pwaApp.showNotification("Altis installed successfully!","success")});window.addEventListener("online",()=>{window.pwaApp&&window.pwaApp.showNotification("You are back online!","success")});window.addEventListener("offline",()=>{window.pwaApp&&window.pwaApp.showNotification("You are offline. Some features may be limited.","warning")});
