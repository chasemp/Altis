(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const r of document.querySelectorAll('link[rel="modulepreload"]'))t(r);new MutationObserver(r=>{for(const i of r)if(i.type==="childList")for(const a of i.addedNodes)a.tagName==="LINK"&&a.rel==="modulepreload"&&t(a)}).observe(document,{childList:!0,subtree:!0});function n(r){const i={};return r.integrity&&(i.integrity=r.integrity),r.referrerPolicy&&(i.referrerPolicy=r.referrerPolicy),r.crossOrigin==="use-credentials"?i.credentials="include":r.crossOrigin==="anonymous"?i.credentials="omit":i.credentials="same-origin",i}function t(r){if(r.ep)return;r.ep=!0;const i=n(r);fetch(r.href,i)}})();class u{constructor(){this.isSupported=this.checkSupport(),this.credentials=new Map,this.authCount=0,this.currentUserId=null,this.currentCredentialId=null}checkSupport(){return!!(navigator.credentials&&window.PublicKeyCredential)}async checkPlatformAuthenticator(){try{console.log("Checking platform authenticator availability...");const e=await PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable();return console.log("Platform authenticator available:",e),e?!0:(console.warn("Platform authenticator not available, will try fallback approach"),!1)}catch(e){return console.error("Platform authenticator check failed:",e),console.warn("Platform authenticator check failed, will try fallback approach"),!1}}checkAndroidRequirements(){const e=navigator.userAgent.toLowerCase(),n=e.includes("android"),t=e.includes("chrome"),r=window.isSecureContext;if(n&&t){if(!r)throw new Error("HTTPS is required for biometric authentication on Android Chrome");if(location.protocol!=="https:"&&location.hostname!=="localhost")throw new Error("Biometric authentication requires HTTPS on Android Chrome")}return!0}generateChallenge(){const e=new Uint8Array(32);return crypto.getRandomValues(e),e}arrayBufferToBase64URL(e){const n=new Uint8Array(e);let t="";for(let r=0;r<n.byteLength;r++)t+=String.fromCharCode(n[r]);return btoa(t).replace(/\+/g,"-").replace(/\//g,"_").replace(/=/g,"")}base64URLToArrayBuffer(e){const n=e.replace(/-/g,"+").replace(/_/g,"/"),t=atob(n),r=new Uint8Array(t.length);for(let i=0;i<t.length;i++)r[i]=t.charCodeAt(i);return r.buffer}async register(e=null){if(!this.isSupported)throw new Error("WebAuthn is not supported in this browser");this.checkAndroidRequirements();const n=await this.checkPlatformAuthenticator();if(e||(e="user_"+Date.now()+"_"+Math.random().toString(36).substr(2,9)),!n){console.log("Platform authenticator not available, trying fallback approach first...");try{return await this.registerFallback(e)}catch(t){console.error("Fallback registration failed:",t)}}try{const r={publicKey:{challenge:this.generateChallenge(),rp:{name:"Altis",id:window.location.hostname||"localhost"},user:{id:new TextEncoder().encode(e),name:e,displayName:"Altis User"},pubKeyCredParams:[{type:"public-key",alg:-7},{type:"public-key",alg:-257}],authenticatorSelection:{authenticatorAttachment:"platform",userVerification:"required",residentKey:"required"},timeout:6e4,attestation:"none"}};console.log("Creating credential with options:",r);const i=await navigator.credentials.create(r);console.log("Credential created successfully:",i);const a={id:i.id,rawId:this.arrayBufferToBase64URL(i.rawId),publicKey:this.arrayBufferToBase64URL(i.response.publicKey),userId:e,createdAt:new Date().toISOString()};return this.credentials.set(i.id,a),this.currentUserId=e,this.currentCredentialId=i.id,localStorage.setItem("altis_credentials",JSON.stringify(Array.from(this.credentials.entries()))),localStorage.setItem("altis_user_id",e),localStorage.setItem("altis_credential_id",i.id),{success:!0,credentialId:i.id,userId:e,message:"Biometric credential created successfully!"}}catch(t){if(console.error("Registration failed:",t),t.name==="NotSupportedError"||t.message.includes("platform authenticator")){console.log("Trying fallback approach without platform authenticator restriction...");try{return await this.registerFallback(e)}catch(r){console.error("Fallback registration also failed:",r)}}throw t.name==="NotSupportedError"?new Error("Biometric authentication is not supported on this device"):t.name==="NotAllowedError"?new Error("Registration was cancelled or not allowed"):t.name==="SecurityError"?new Error("Security error - make sure you are using HTTPS"):t.name==="InvalidStateError"?new Error("Invalid state - credential may already exist"):new Error(`Registration failed: ${t.message||"Unknown error occurred"}`)}}async registerFallback(e){console.log("Attempting fallback registration...");const n=this.generateChallenge(),t=[{name:"No authenticator selection",options:{publicKey:{challenge:n,rp:{name:"Altis",id:window.location.hostname||"localhost"},user:{id:new TextEncoder().encode(e),name:e,displayName:"Altis User"},pubKeyCredParams:[{type:"public-key",alg:-7},{type:"public-key",alg:-257}],timeout:6e4,attestation:"none"}}},{name:"Minimal authenticator selection",options:{publicKey:{challenge:n,rp:{name:"Altis",id:window.location.hostname||"localhost"},user:{id:new TextEncoder().encode(e),name:e,displayName:"Altis User"},pubKeyCredParams:[{type:"public-key",alg:-7},{type:"public-key",alg:-257}],authenticatorSelection:{userVerification:"preferred"},timeout:6e4,attestation:"none"}}},{name:"Cross-platform authenticator",options:{publicKey:{challenge:n,rp:{name:"Altis",id:window.location.hostname||"localhost"},user:{id:new TextEncoder().encode(e),name:e,displayName:"Altis User"},pubKeyCredParams:[{type:"public-key",alg:-7},{type:"public-key",alg:-257}],authenticatorSelection:{authenticatorAttachment:"cross-platform",userVerification:"preferred",residentKey:"preferred"},timeout:6e4,attestation:"none"}}}];for(const r of t)try{console.log(`Trying ${r.name}...`),console.log("Create options:",r.options);const i=await navigator.credentials.create(r.options);console.log(`Success with ${r.name}:`,i);const a={id:i.id,rawId:this.arrayBufferToBase64URL(i.rawId),publicKey:this.arrayBufferToBase64URL(i.response.publicKey),userId:e,createdAt:new Date().toISOString()};return this.credentials.set(i.id,a),this.currentUserId=e,this.currentCredentialId=i.id,localStorage.setItem("altis_credentials",JSON.stringify(Array.from(this.credentials.entries()))),localStorage.setItem("altis_user_id",e),localStorage.setItem("altis_credential_id",i.id),{success:!0,credentialId:i.id,userId:e,message:`Biometric credential created successfully (${r.name})!`}}catch(i){console.error(`${r.name} failed:`,i)}throw new Error("All fallback registration approaches failed")}async authenticate(){if(!this.isSupported)throw new Error("WebAuthn is not supported in this browser");this.checkAndroidRequirements();try{if(this.loadStoredCredentials(),this.credentials.size===0)throw new Error("No credentials found. Please register first.");const e=this.generateChallenge(),n=Array.from(this.credentials.keys()).map(s=>this.base64URLToArrayBuffer(s)),t={publicKey:{challenge:e,allowCredentials:n.map(s=>({type:"public-key",id:s})),userVerification:"preferred",timeout:6e4}},r=await navigator.credentials.get(t),i=this.arrayBufferToBase64URL(r.rawId),a=this.credentials.get(i);if(!a)throw new Error("Credential not found");return this.authCount++,this.currentUserId=a.userId,this.currentCredentialId=i,localStorage.setItem("altis_auth_count",this.authCount.toString()),{success:!0,credentialId:i,userId:a.userId,authCount:this.authCount,message:"Authentication successful!"}}catch(e){throw console.error("Authentication failed:",e),e.name==="NotSupportedError"?new Error("Biometric authentication is not supported on this device"):e.name==="NotAllowedError"?new Error("Authentication was cancelled or not allowed"):e.name==="SecurityError"?new Error("Security error - make sure you are using HTTPS"):e.name==="InvalidStateError"?new Error("Invalid state - no credentials found"):new Error(`Authentication failed: ${e.message||"Unknown error occurred"}`)}}loadStoredCredentials(){try{const e=localStorage.getItem("altis_credentials");if(e){const i=JSON.parse(e);this.credentials=new Map(i)}const n=localStorage.getItem("altis_user_id"),t=localStorage.getItem("altis_credential_id"),r=localStorage.getItem("altis_auth_count");n&&(this.currentUserId=n),t&&(this.currentCredentialId=t),r&&(this.authCount=parseInt(r,10))}catch(e){console.error("Failed to load stored credentials:",e)}}isRegistered(){return this.loadStoredCredentials(),this.credentials.size>0}logout(){this.currentUserId=null,this.currentCredentialId=null,this.authCount=0,localStorage.removeItem("altis_user_id"),localStorage.removeItem("altis_credential_id"),localStorage.removeItem("altis_auth_count")}getCurrentUser(){return{userId:this.currentUserId,credentialId:this.currentCredentialId,authCount:this.authCount,isAuthenticated:!!this.currentUserId}}isAuthenticated(){return!!this.currentUserId}}class h{constructor(){this.webauthn=new u,this.elements=this.initializeElements(),this.initializeApp()}initializeElements(){return{statusIndicator:document.getElementById("status-indicator"),statusText:document.getElementById("status-text"),registerBtn:document.getElementById("register-btn"),authenticateBtn:document.getElementById("authenticate-btn"),logoutBtn:document.getElementById("logout-btn"),userInfo:document.getElementById("user-info"),userId:document.getElementById("user-id"),credentialId:document.getElementById("credential-id"),authCount:document.getElementById("auth-count"),authContainer:document.getElementById("auth-container"),content:document.getElementById("content")}}async initializeApp(){try{if(this.initializeVersionDisplay(),!this.webauthn.isSupported){this.updateStatus("error","WebAuthn not supported in this browser"),this.disableAllButtons();return}this.webauthn.loadStoredCredentials(),this.webauthn.isRegistered()?(this.updateStatus("loading","Checking authentication..."),this.webauthn.isAuthenticated()?this.showAuthenticatedState():this.showRegisteredState()):this.showUnregisteredState(),this.setupEventListeners()}catch(e){console.error("App initialization failed:",e),this.updateStatus("error","Initialization failed")}}initializeVersionDisplay(){const e=document.getElementById("version-number"),n=document.getElementById("build-info");if(e&&n){const t=new Date,r=t.getFullYear(),i=String(t.getMonth()+1).padStart(2,"0"),a=String(t.getDate()).padStart(2,"0"),s=String(t.getHours()).padStart(2,"0"),c=String(t.getMinutes()).padStart(2,"0"),l=`${r}${i}${a}-${s}${c}`,d=t.toLocaleString("en-US",{month:"2-digit",day:"2-digit",year:"numeric",hour:"2-digit",minute:"2-digit",second:"2-digit",hour12:!0});e.textContent=`v0.0.1+${l}`,n.textContent=`Build: ${l} (${d})`}}setupEventListeners(){this.elements.registerBtn.addEventListener("click",()=>this.handleRegister()),this.elements.authenticateBtn.addEventListener("click",()=>this.handleAuthenticate()),this.elements.logoutBtn.addEventListener("click",()=>this.handleLogout())}async handleRegister(){try{this.updateStatus("loading","Creating biometric key..."),this.disableAllButtons();const e=await this.webauthn.register();e.success&&(this.updateStatus("authenticated","Biometric key created successfully!"),this.showAuthenticatedState(),this.showUserInfo(e.userId,e.credentialId))}catch(e){console.error("Registration error:",e),this.updateStatus("error",e.message),this.showRegisteredState()}}async handleAuthenticate(){try{this.updateStatus("loading","Authenticating with biometric..."),this.disableAllButtons();const e=await this.webauthn.authenticate();e.success&&(this.updateStatus("authenticated","Authentication successful!"),this.showAuthenticatedState(),this.showUserInfo(e.userId,e.credentialId,e.authCount))}catch(e){console.error("Authentication error:",e),this.updateStatus("error",e.message),this.showRegisteredState()}}handleLogout(){this.webauthn.logout(),this.updateStatus("loading","Logged out"),this.showRegisteredState()}updateStatus(e,n){this.elements.statusIndicator.className=`status-indicator ${e}`,this.elements.statusText.textContent=n,e==="loading"?this.disableAllButtons():e==="error"&&this.showRegisteredState()}showUnregisteredState(){this.elements.registerBtn.disabled=!1,this.elements.authenticateBtn.disabled=!0,this.elements.logoutBtn.disabled=!0,this.elements.userInfo.style.display="none",this.elements.content.style.display="none",this.elements.authContainer.style.display="block"}showRegisteredState(){this.elements.registerBtn.disabled=!0,this.elements.authenticateBtn.disabled=!1,this.elements.logoutBtn.disabled=!1,this.elements.userInfo.style.display="none",this.elements.content.style.display="none",this.elements.authContainer.style.display="block"}showAuthenticatedState(){this.elements.registerBtn.disabled=!0,this.elements.authenticateBtn.disabled=!0,this.elements.logoutBtn.disabled=!1,this.elements.userInfo.style.display="block",this.elements.content.style.display="block",this.elements.authContainer.style.display="none"}showUserInfo(e,n,t=0){this.elements.userId.textContent=e,this.elements.credentialId.textContent=n,this.elements.authCount.textContent=t}disableAllButtons(){this.elements.registerBtn.disabled=!0,this.elements.authenticateBtn.disabled=!0,this.elements.logoutBtn.disabled=!0}showNotification(e,n="info"){const t=document.createElement("div");t.className=`notification notification-${n}`,t.textContent=e,Object.assign(t.style,{position:"fixed",top:"20px",right:"20px",padding:"1rem 1.5rem",borderRadius:"10px",color:"white",fontWeight:"600",zIndex:"1000",maxWidth:"300px",wordWrap:"break-word",boxShadow:"0 10px 20px rgba(0, 0, 0, 0.2)",transform:"translateX(100%)",transition:"transform 0.3s ease"});const r={success:"#48bb78",error:"#f56565",info:"#4299e1",warning:"#ed8936"};t.style.backgroundColor=r[n]||r.info,document.body.appendChild(t),setTimeout(()=>{t.style.transform="translateX(0)"},100),setTimeout(()=>{t.style.transform="translateX(100%)",setTimeout(()=>{t.parentNode&&t.parentNode.removeChild(t)},300)},3e3)}}document.addEventListener("DOMContentLoaded",()=>{window.pwaApp=new h});window.addEventListener("beforeinstallprompt",o=>{o.preventDefault(),window.pwaApp&&window.pwaApp.showNotification("Altis can be installed on your device!","info")});window.addEventListener("appinstalled",()=>{console.log("PWA was installed"),window.pwaApp&&window.pwaApp.showNotification("Altis installed successfully!","success")});window.addEventListener("online",()=>{window.pwaApp&&window.pwaApp.showNotification("You are back online!","success")});window.addEventListener("offline",()=>{window.pwaApp&&window.pwaApp.showNotification("You are offline. Some features may be limited.","warning")});
